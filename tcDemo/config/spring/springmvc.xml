<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.3.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.3.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.3.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.3.xsd ">
	
	<!-- 可以扫描controller 这里让扫描controller，指定controller的包 -->
	<context:component-scan base-package="com.center"/>
	
	<!-- 通过spring的PropertiesFactoryBean加载properties文件-->
	<bean id="prop" class="org.springframework.beans.factory.config.PropertiesFactoryBean">  
	    <!-- 这里是PropertiesFactoryBean类，它也有个locations属性，也是接收一个数组 -->
	    <property name="locations">
	        <array>  
	            <value>classpath:wx.properties</value>  
	        </array>  
	    </property>  
	</bean>
	<!-- Spring的动态变量,能在bean中直接调用 -->   
	<bean id="propConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
	    <property name="properties" ref="prop" />  
	</bean>
	
	
	<!-- 定义不被SpringMVC拦截的静态资源 -->
	<mvc:resources location="/static/" mapping="/static/**"/>
	<mvc:resources location="/shujin/" mapping="/shujin/**"/>
	
	<!-- 自定义拦截链配置 -->
	<mvc:interceptors>  
        
		<!-- Session失效拦截 -->
		<!-- <mvc:interceptor>  -->  
			<!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller --> 
			<!-- <mvc:mapping path="/**" />   -->
			<!-- 不需要拦截的地址 -->
			<!-- <mvc:exclude-mapping path="/system/login" /> 
			<bean class="com.center.interceptor.SessionInterceptor"></bean>   
		</mvc:interceptor>  -->
        <!-- 请求权限检查 -->
        <mvc:interceptor>  
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/static/**"/> 
            <bean class="com.center.interceptor.RequestCheckInterceptor"></bean>  
        </mvc:interceptor>
    </mvc:interceptors>
    
	<!-- 使@aspectj注解起作用，spring会自动生成目标类的代理对象 -->
	<aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
	
	<!--注解映射器 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/> -->
	<!--注解适配器 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/> -->
	
	<!-- 使用 mvc:annotation-driven代替上边注解映射器和注解适配器配置
	mvc:annotation-driven默认加载很多的参数绑定方法，
	比如json转换解析器就默认加载了，如果使用mvc:annotation-driven不用配置上边的RequestMappingHandlerMapping和RequestMappingHandlerAdapter
	实际开发时使用mvc:annotation-driven
	 -->
	<mvc:annotation-driven />
	<!-- 设置json和response的字符编码 --> 
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
				<ref bean="stringHttpMessageConverter" />
			</list>
		</property>
	</bean>
	<bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/plain;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<!-- 视图解析器
	解析jsp解析，默认使用jstl标签，classpath下的得有jstl的包
	 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 配置jsp路径的前缀 -->
		<property name="prefix" value="/WEB-INF/jsp/"/>
		<!-- 配置jsp路径的后缀 -->
		<property name="suffix" value=".jsp"/>
	</bean>
	<!-- 多部分文件上传 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	     <property name="maxUploadSize" value="104857600" />
	     <property name="maxUploadSizePerFile" value="20971520" />
	     <property name="maxInMemorySize" value="4096" />
	     <property name="defaultEncoding" value="UTF-8"></property>
	</bean>
</beans>